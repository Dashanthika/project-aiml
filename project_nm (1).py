# -*- coding: utf-8 -*-
"""Project-NM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WL8u9j_ABLZmlD9wuUfgeaumB-cv9W4K
"""

import numpy as np
import pandas as pd

df=pd.read_csv('/content/DATASET - Sheet1.csv')



df.info
df.isnull().sum()

df.head()

df.tail()

df['WATER REQUIREMENT']

df.describe()

df.info()

df.nunique()

df.isna()

df.isnull().sum()

my_numeric_df = df.select_dtypes(exclude='object')
my_object_df = df.select_dtypes(include='object')

my_numeric_df

my_object_df

import matplotlib.pyplot as plt
import seaborn as sns

df_object_dummies = pd.get_dummies(my_object_df, drop_first = True)

df_object_dummies = df_object_dummies.astype(int)
df_object_dummies

final_df = pd.concat([my_numeric_df , df_object_dummies], axis = 1)

final_df

final_df.corr()['WATER REQUIREMENT'].sort_values()

correlation_series = final_df.corr()['WATER REQUIREMENT'].sort_values()

plt.figure(figsize=(12, 8))
correlation_series.plot(kind='bar')
plt.title('Correlation with WATER REQUIREMENT')
plt.xlabel('Column')
plt.ylabel('Correlation')
plt.xticks(rotation=90)
plt.show()

correlation_matrix = final_df.corr()

sorted_correlation = correlation_matrix['WATER REQUIREMENT'].sort_values()

subset_corr_matrix = correlation_matrix.loc[sorted_correlation.index, sorted_correlation.index]

plt.figure(figsize=(10, 8))
sns.heatmap(subset_corr_matrix, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

X = final_df.drop(columns=['WATER REQUIREMENT'])
y = final_df['WATER REQUIREMENT']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, min_samples_leaf = 4,min_samples_split =10)

model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error (MAE): {mae}')

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error (MSE): {mse}')

r2 = r2_score(y_test, y_pred)
print(f'R-squared (RÂ²): {r2}')